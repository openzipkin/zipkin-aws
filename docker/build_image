#!/bin/sh
#
# Copyright 2016-2020 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

# This script is only a convenience as the build environment is controlled in
# the Dockerfile. That said, it uses only basic shell commands to help it work
# on developer laptops as well as CI nodes. Mainly, this centralizes the base
# Java image mappings and ensures all metadata needed is taken from pom.xml.
set -ue

if ! test -f docker/Dockerfile; then
  echo Please execute this script from the repository root
  exit 1
fi

PROJECT="Zipkin Amazon Web Services"
# update .dockerignore if you ever add another here
ARTIFACTS="collector-sqs collector-kinesis storage-elasticsearch-aws storage-xray"
MODULES="sqs,kinesis,elasticsearch-aws,xray"
TAG=${1:-openzipkin/zipkin-aws:test}
# Default the version to the pom when unset
POM_VERSION=${POM_VERSION:-$(mvn help:evaluate -N -Dexpression=project.version -q -DforceStdout)}
RELEASE_VERSION=${2:-${POM_VERSION}}
OP=${3:-load}

DOCKER_TARGET=${DOCKER_TARGET:-$(echo $TAG|sed -e 's~.*/\(.*\):.*~\1~g')}
# When true use zipkin-aws.jar produced by a Maven build.
# This is implicitly true when a SNAPSHOT version.
RELEASE_FROM_MAVEN_BUILD=${RELEASE_FROM_MAVEN_BUILD:-false}

# Only runs maven commands: we use one version to keep the layer count manageable and centralized.
JAVA_VERSION=${JAVA_VERSION:-15.0.1_p9}
ZIPKIN_VERSION=${ZIPKIN_VERSION:-$(mvn help:evaluate -N -Dexpression=zipkin.version -q -DforceStdout)}

# Platforms to eventually push to the registry
PLATFORMS="linux/amd64,linux/arm64"
DOCKERFILE_PATH=docker/Dockerfile

# We don't currently release from a remote snapshot repository. When the version is snapshot, this
# is a local build or a pull request. Look to see if the files the build would produce are present.
# This allows skipping the build when an upstream step or stage has already produced them.
case "${RELEASE_VERSION}" in
  *-SNAPSHOT )
    # just check one module
    if [ -f "module/storage-xray/target/zipkin-module-storage-xray-${RELEASE_VERSION}-module.jar" ]; then
      echo Re-using ${PROJECT} ${RELEASE_VERSION} binaries from a previous build...
    elif [ ${RELEASE_FROM_MAVEN_BUILD} = true ]; then
      echo "RELEASE_FROM_MAVEN_BUILD=true, but required binaries are not present"
      exit 1
    else
      if [ ${RELEASE_VERSION} != ${POM_VERSION} ]; then
        echo "To build ${PROJECT} implicitly, run: docker/build_image ${TAG} ${POM_VERSION}"
        exit 1
      fi

      echo Building ${PROJECT} ${RELEASE_VERSION}...
      # Skips tests and license to run faster and allow shallow clones
      ./mvnw -T1C -q --batch-mode -DskipTests -Dlicense.skip=true package
    fi
    RELEASE_FROM_MAVEN_BUILD=true
    ;;
esac

DOCKER_ARGS="-f ${DOCKERFILE_PATH} --target ${DOCKER_TARGET} --tag ${TAG} \
--build-arg release_version=${RELEASE_VERSION} --label zipkin-aws-version=${RELEASE_VERSION} \
--build-arg modules=${MODULES} --label zipkin-aws-modules=${MODULES} \
--build-arg release_from_maven_build=${RELEASE_FROM_MAVEN_BUILD} \
--build-arg java_version=${JAVA_VERSION} --build-arg zipkin_version=${ZIPKIN_VERSION} \
--label org.opencontainers.image.source=https://github.com/openzipkin/zipkin-aws \
--label org.opencontainers.image.version=${RELEASE_VERSION} ."

# Avoid buildx for two reasons:
#  * It only supports one platform/arch on load https://github.com/docker/buildx/issues/59
#  * It would pull Docker Hub for moby/buildkit or multiarch/qemu-user-static images, using up quota
if [ "${OP}" = "load" ]; then
  echo "Building image ${TAG} with zipkin_version ${ZIPKIN_VERSION}"
  docker build --build-arg artifacts="${ARTIFACTS}" ${DOCKER_ARGS}
  exit $?
fi

if [ "${OP}" != "push" ]; then
  echo "Invalid OP: ${OP}, Ex. load or push"
  exit 1
fi

# This can be less manual in the future, for example checking buildx to see what it can do.
ARCH=${ARCH:-$(uname -m)}
case ${ARCH} in
  x86_64* )
    ;;
  amd64* )
    ;;
  * )
    echo Pushing platforms ${PLATFORMS} with arch ${ARCH} is not yet supported.
    exit 1
esac

echo "Pushing image ${TAG} with platforms ${PLATFORMS} and Zipkin version ${ZIPKIN_VERSION}"
docker buildx build --progress plain --platform=${PLATFORMS} --build-arg artifacts="${ARTIFACTS}" \
${DOCKER_ARGS} --push
